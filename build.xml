<?xml version="1.0" encoding="UTF-8"?>

<project name="Build for TYPO3 extension testing" default="help" basedir="">

	<!-- EDIT PER PROJECT -->
	<property name="typo3.version" value="4.5.11" />
	<property name="core.home" value="/t3core" />

	<!-- EDIT PER INSTALLATION -->
	<property name="antcontrib.path" value="/usr/share/java/ant-contrib.jar" />
	<property name="public.path" value="." />

	<!-- INSERT BELOW CUSTOM TASKS -->
	<property name="extension.path" value="${public.path}/." />

	<!-- PHP Code Sniffer -->
	<property name="phpcs.ignore.path" value="${extension.path}/ext_*,*jquery*,*tcpdf*,*lib*" />

	<!-- Copy Paste Detector -->
	<property name="phpcpd.ignore.path" value="${extension.path}/Configuration/,Resources/Public,*lib*" />

	<!-- PHP Mess Detector - put a white space if empty -->
	<property name="phpmd.ignore.path" value="Resources/Public,Configuration,*lib*"/>

	<!-- HELP TASK -->
	<target name="help" description="Displays a help message">
		<echo>Ant usage:</echo>
		<echo>====================</echo>
		<echo>ant build </echo>
		<echo>ant phpmd Perform project mess detection using PHPMD and output its result on the console</echo>
		<echo>ant phpcs Find coding standard violations using PHP_CodeSniffer and output its result on the console</echo>

		<echo></echo>
		<echo>Internal Ants:</echo>
		<echo>====================</echo>
		<echo>ant check-environment  Make sure the environment is well configured</echo>
		<echo>ant prepare            Reset environment for the build</echo>
		<echo>ant setup-typo3        Setup TYPO3 for the project (e.g download Core, dump database, ...)</echo>
		<echo>ant lint               Validate PHP souce code using PHPLint utility</echo>
		<echo>ant phploc             Measure project size using PHPLOC</echo>
		<echo>ant pdepend            Calculate software metrics using PHP_Depend</echo>
		<echo>ant phpmd-ci           Perform project mess detection using PHPMD</echo>
		<echo>ant phpcs-ci           Find coding standard violations using PHP_CodeSniffer</echo>
		<echo>ant phpcpd             Find duplicate code using PHPCPD</echo>
		<echo>ant phpunit            Run unit tests with PHPUnit</echo>
		<echo>ant phpcb              Aggregate tool output with PHP_CodeBrowser</echo>
		<echo>ant phpdoc             Generate API documentation using PHPDocumentor</echo>

	</target>

	<target name="build-functional" depends="">
		<exec dir="${basedir}" executable="behat" failonerror="true">
			<arg line="-c behat.yml "/>
				</exec>
	</target>

	<!-- CONVENIENCE TASK DEFINITION -->
	<target name="build-debug" depends="" />
	<target name="build" depends="prepare, phploc, pdepend, phpmd-ci, phpcs-ci, phpcpd, phpcb" />
<!--
	<target name="build"
			depends="output-commands, check-environment, prepare, setup-typo3, lint, phploc, pdepend, phpmd-ci, phpcs-ci, phpcpd, phpunit, phpcb, phpdoc, maven" />
-->
	<target name="build-no-phpunit" depends="check-environment, prepare, setup-typo3, lint, phploc, pdepend, phpmd-ci, phpcs-ci, phpcpd, phpcb, phpdoc" />
	<target name="build-parallel"
			depends="check-environment, prepare, setup-typo3, lint, tools-parallel, phpunit, phpcb, phpdoc"/>

	<target name="output-commands" description="Displays some debug commands">
		<echo>***********************************</echo>
		<echo>********* EXECUTED COMMANDS *******</echo>
		<echo>***********************************</echo>
		<echo></echo>
		<echo>cd ${basedir}</echo>
		<echo></echo>
		<echo>php ${public.path}/typo3/cli_dispatch.phpsh phpunit --coverage-html build/coverage --coverage-clover
			build/logs/clover.xml --log-junit build/logs/junit.xml ${extension.path}</echo>
		<echo>***********************************</echo>
	</target>

	<target name="tools-parallel" description="Run tools in parallel">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend"/>
				<antcall target="phpmd-ci"/>
			</sequential>
			<antcall target="phpcpd"/>
			<antcall target="phpcs-ci"/>
			<antcall target="phploc"/>
		</parallel>
	</target>

	<target name="clean" description="Cleanup build artifacts">
		<delete dir="build/api"/>
		<delete dir="build/code-browser"/>
		<delete dir="build/coverage"/>
		<delete dir="build/logs"/>
		<delete dir="build/pdepend"/>
	</target>

	<!-- TASK DEFINITION -->
	<target name="check-environment" description="Check the environment is safe">

		<echo>Checking Environment...</echo>

		<!-- Check existance of extension to be tested -->
		<fail message="Configuration error: wrong extension path. Make sure property 'extension.path' is correctly set.">
			<condition>
				<not>
					<available file="${extension.path}" type="dir"/>
				</not>
			</condition>
		</fail>

		<!-- Check existance of Ant Contrib -->
		<fail message="Configuration error: Ant Contrib is not installed or wrongly configured. Make sure property 'antcontrib.path' is correctly set">
			<condition>
				<not>
					<available file="${antcontrib.path}" type="file"/>
				</not>
			</condition>
		</fail>
	</target>

	<target name="setup-typo3" description="Set up TYPO3 envirnoment">

		<property name="core.path" value="${core.home}/typo3_src-${typo3.version}" />

		<!-- GENERATE typo3_src SYMLINK -->
		<exec executable="rm">
			<arg value="-f" />
			<arg value="${public.path}/typo3_src" />
		</exec>
		<symlink resource="${core.path}" link="${public.path}/typo3_src" />

	</target>

	<target name="prepare" depends="clean" description="Prepare for build">
		<mkdir dir="build/api"/>
		<mkdir dir="build/code-browser"/>
		<mkdir dir="build/coverage"/>
		<mkdir dir="build/logs"/>
		<mkdir dir="build/pdepend"/>
	</target>

	<target name="lint">
		<apply executable="php" failonerror="true">
			<arg value="-l" />

			<fileset dir="${extension.path}">
				<include name="**/*.php" />
			</fileset>

			<fileset dir="${extension.path}">
				<include name="**/*.php" />
			</fileset>
		</apply>
	</target>

	<target name="phpdoc" description="Generate API documentation using PHPDocumentor">
		<exec executable="phpdoc">
			<arg value="--directory" />
			<arg path="${extension.path}" />
			<arg value="--target" />
			<arg path="build/api" />
			<arg value="--ignore" />
			<arg value="autoload.php" />
			<arg value="--quiet" />
		</exec>
	</target>

	<target name="phploc" description="Measure project size using PHPLOC">
		<exec executable="phploc">
			<arg value="--log-csv" />
			<arg value="build/logs/phploc.csv" />
			<arg path="${extension.path}" />
		</exec>
	</target>

	<target name="pdepend" description="Calculate software metrics using PHP_Depend">
		<exec executable="pdepend">
			<arg value="--jdepend-xml=build/logs/jdepend.xml" />
			<arg value="--jdepend-chart=build/pdepend/dependencies.svg" />
			<arg value="--phpunit-xml=build/logs/pdepend.xml" />
			<arg value="--overview-pyramid=build/pdepend/overview-pyramid.svg" />
			<arg path="${extension.path}" />
		</exec>
	</target>

	<target name="phpmd" description="Perform project mess detection using PHPMD">
		<exec executable="phpmd">
			<arg path="${extension.path}" />
			<arg value="text" />
			<arg value="build/phpmd.xml" />
			<arg value="--exclude" />
			<arg value="${phpmd.ignore.path}" />
		</exec>
	</target>

	<target name="phpmd-ci" description="Perform project mess detection using PHPMD">
		<exec executable="phpmd">
			<arg path="${extension.path}" />
			<arg value="xml" />
			<arg value="build/phpmd.xml" />
			<arg value="--reportfile" />
			<arg value="build/logs/pmd.xml" />
			<arg value="--exclude" />
			<arg value="${phpmd.ignore.path}" />
		</exec>
	</target>

	<target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer">
		<exec executable="phpcs">
			<arg value="--standard=build/phpcs.xml" />
			<arg value="--ignore=${phpcs.ignore.path}" />
			<arg path="${extension.path}" />
		</exec>
	</target>

	<target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer">
		<exec executable="phpcs" output="/dev/null">
			<arg value="--report=checkstyle" />
			<arg value="--report-file=build/logs/checkstyle.xml" />
			<arg value="--standard=build/phpcs.xml" />
			<arg value="--ignore=${phpcs.ignore.path}" />
			<arg path="${extension.path}" />
		</exec>

		<!-- For Sonar Convention -->
		<copy file="build/logs/checkstyle.xml" tofile="build/logs/codesniffer.xml"/>
	</target>

	<target name="phpcpd" description="Find duplicate code using PHPCPD">
		<exec executable="phpcpd">
			<arg value="--log-pmd" />
			<arg value="build/logs/pmd-cpd.xml" />
			<arg value="--exclude" />
			<arg value="${phpcpd.ignore.path}" />
			<arg path="${extension.path}" />
		</exec>
	</target>

	<target name="phpunit" description="Run unit tests with PHPUnit">
		<!--<exec executable="phpunit" failonerror="true"/>-->
		<!--
			| TYPO3 expects to run phpunit through typo3/cli_dispatch.phpsh
			| other PHP application may be able to run phpunit directly
		-->
		<exec executable="php" failonerror="true">
			<arg path="${public.path}/typo3/cli_dispatch.phpsh" />
			<arg value="phpunit" />
			<arg value="--coverage-html"/>
			<arg path="build/coverage" />
			<arg value="--coverage-clover"/>
			<arg path="build/logs/clover.xml" />
			<arg value="--log-junit"/>
			<arg path="build/logs/junit.xml" />
			<arg path="${extension.path}" />
		</exec>

		<!-- For Sonar Convention -->
		<copy file="build/logs/clover.xml" tofile="build/logs/phpunit.coverage.xml"/>
		<copy file="build/logs/junit.xml" tofile="build/logs/phpunit.xml"/>
	</target>

	<target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
		<exec executable="phpcb">
			<arg value="--log" />
			<arg path="build/logs" />
			<arg value="--exclude" />
			<arg path="${public.path}/typo3_src*" />
			<arg value="--exclude" />
			<arg path="${public.path}/typo3conf/ext/phpunit*" />
			<arg value="--source" /><!-- does not seems to be used if log is given -->
			<arg path="${extension.path}" />
			<arg value="--output" />
			<arg path="build/code-browser" />
		</exec>
	</target>

	<target name="maven" description="Maven integration for Sonar">
		<exec executable="mvn">
			<arg value="sonar:sonar" />
			<arg value="-f" />
			<arg value="${pom.file}" />
		</exec>
	</target>

	<!-- ANT CONTRIB -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${antcontrib.path}"/>
		</classpath>
	</taskdef>
</project>